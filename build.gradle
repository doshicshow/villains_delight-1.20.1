plugins {
	id 'fabric-loom' version '1.10-SNAPSHOT'
	id 'maven-publish'
	id "org.jetbrains.kotlin.jvm" version "2.1.21"
}


repositories {
	maven {
		name = "Greenhouse Maven"
		url = 'https://maven.greenhouseteam.dev/releases/'
	}
	maven { url = "https://mvn.devos.one/snapshots/" } // Porting Lib
	maven { url = "https://mvn.devos.one/releases" } // Porting Lib but more lib and porting
	maven { url = "https://maven.quiltmc.org/repository/release/" }
	maven {
		url "https://maven.jamieswhiteshirt.com/libs-release" // Reach Entity Attributes (Required by Porting Lib)
		content {
			includeGroup "com.jamieswhiteshirt"
		}
	}
	maven {
		name = "Jitpack, ASM, MixinExtras"
		url  = "https://jitpack.io"
	}
	maven {
		name "cloth config, rei"
		url "https://maven.shedaniel.me"
	}
	maven {
		name "terraform wood api, trinkets"
		url "https://maven.terraformersmc.com"
	}
	maven { url 'https://www.cursemaven.com' }
}

loom {
	splitEnvironmentSourceSets()
	mods {
		villains_delight {
			sourceSet sourceSets.main
			sourceSet sourceSets.client
		}
	}
}

fabricApi {
	configureDataGeneration() {
		modId = "villains_delight"
		client = true
	}
}

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings loom.layered {
		mappings("org.quiltmc:quilt-mappings:1.20.1+build.23:intermediary-v2")
//		mappings file("mappings/farmers_delight_fix2.tiny")
	}
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
	modImplementation("vectorwing:FarmersDelight:${fdrf_version}") {
		exclude(group: "net.fabricmc")
	}

	modImplementation("net.fabricmc:fabric-language-kotlin:1.13.3+kotlin.2.1.21")

	modImplementation include("com.terraformersmc.terraform-api:terraform-wood-api-v1:${project.terraform_wood_api_version}")

	// Fabric ASM
	modImplementation include("com.github.Chocohead:Fabric-ASM:v2.3")
}

processResources {
	inputs.property "version", project.version
}

tasks.withType(JavaCompile).configureEach {
	options.release = 21
	options.fork = true
	options.forkOptions.jvmArgs += ['-Xmx1G']
}


tasks.register('printClasspath') {
	doLast {
		println "Classpath length: " + sourceSets.main.runtimeClasspath.asPath.length()
		sourceSets.main.runtimeClasspath.each { println it }
	}
}

java {
	withSourcesJar()
	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21
}