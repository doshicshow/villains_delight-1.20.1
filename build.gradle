plugins {
	id 'fabric-loom' version "${loom_version}"
	id 'maven-publish'
	id "org.jetbrains.kotlin.jvm" version "2.1.21"
}

version = project.mod_version
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

repositories {
	// Other repositories can go above or below Modrinth's. We don't need priority :)
	maven { url = "https://api.modrinth.com/maven" }

	// farmers delight repos
	flatDir {
		dirs 'mods'
	}

	mavenLocal()

	maven { url "https://maven.parchmentmc.org" }

	maven {
		url = "https://www.cursemaven.com"
		// allowInsecureProtocol = true // This is generally not recommended, consider using HTTPS or verifying integrity
	}

	maven {
		url "https://maven.firstdarkdev.xyz/snapshots"
	}

	maven {
		name = 'Ladysnake Mods'
		url = 'https://maven.ladysnake.org/releases'
	}

	maven {
		// CraftTweaker, JEI
		name = "BlameJared"
		url = "https://maven.blamejared.com/"
	}
	maven { url "https://maven.ryanliptak.com/" } // AppleSkin


	maven { url = "https://maven.parchmentmc.org" } // Parchment
	maven { url = "https://maven.fabricmc.net/" } // FAPI, Loader
	maven { url = "https://mvn.devos.one/snapshots/" } // Registrate, Porting Lib, Forge Tags, Milk Lib
	maven { url = "https://mvn.devos.one/releases/" }
	maven { // for Porting Lib: Fabric ASM
		url = "https://jitpack.io/"
	}
	maven { url = "https://maven.shedaniel.me/" } // REI and deps
	maven { url = "https://maven.terraformersmc.com/" } // Mod Menu, EMI
	maven { // Reach Entity Attributes
		url = "https://maven.jamieswhiteshirt.com/libs-release"
		content { includeGroup("com.jamieswhiteshirt") }
	}
	maven { url 'https://maven.draylar.dev/releases/' }
	mavenCentral() // Mixin Extras
}

loom {
	splitEnvironmentSourceSets()

	mods {
		"villains_delight" {
			sourceSet sourceSets.main
			sourceSet sourceSets.client
		}
	}

}

fabricApi {
	configureDataGeneration() {
		modId = "villains_delight"
		client = true
	}
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
	modImplementation "net.fabricmc:fabric-language-kotlin:${project.fabric_kotlin_version}"

	// farmers delight
	modImplementation "maven.modrinth:farmers-delight-refabricated:1.20.1-2.4.0"

	// farmers delight dependencies
	// The following two lines are redundant as they are already defined above
	// minecraft "com.mojang:minecraft:${project.minecraft_version}"
	// modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_api_version}"

	include(implementation("io.github.llamalad7:mixinextras-fabric:${mixin_extras_version}"))
	annotationProcessor("io.github.llamalad7:mixinextras-fabric:${mixin_extras_version}") // MixinExtras needs to be on annotationProcessor as well
	annotationProcessor 'net.fabricmc:sponge-mixin:0.12.5+mixin.0.8.5'

	include(modImplementation("com.github.Chocohead:Fabric-ASM:${fabric_asm_version}")) {
		exclude (group: "net.fabricmc.fabric-api")
	}

	for (module in port_lib_modules.split(",")) {
		include(modApi("io.github.fabricators_of_create.Porting-Lib:$module:$port_lib_version"))
	}

	modLocalRuntime("com.terraformersmc:modmenu:${project.modmenu_version}")

	modCompileOnly("com.blamejared.crafttweaker:CraftTweaker-fabric-1.20.1:${crafttweaker_version}")
	// Uncomment the below to test CraftTweaker.
	// modLocalRuntime("com.blamejared.crafttweaker:CraftTweaker-fabric-1.20.1:${crafttweaker_version}")

	modCompileOnly("mezz.jei:jei-${minecraft_version}-common-api:${jei_version}")
	modCompileOnly("mezz.jei:jei-${minecraft_version}-fabric-api:${jei_version}")
	// Uncomment the below to test JEI.
	// modLocalRuntime("mezz.jei:jei-${minecraft_version}-fabric:${jei_version}")

	modCompileOnly "me.shedaniel:RoughlyEnoughItems-api-fabric:${rei_version}"
	modCompileOnly "me.shedaniel:RoughlyEnoughItems-default-plugin-fabric:${rei_version}"
	// Uncomment the below to test REI.
	// modRuntimeOnly "me.shedaniel:RoughlyEnoughItems-fabric:${rei_version}"

	modCompileOnly("dev.emi:emi-fabric:${emi_version}:api") {
		exclude(group: "net.fabricmc.fabric-api")
	}
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": inputs.properties.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 17
	// Add the following lines to enable command line shortening
	options.fork = true
	options.forkOptions.jvmArgs += ['-Xmx1G'] // Optional, can remove if not needed
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
	kotlinOptions {
		jvmTarget = "17" // Changed to String as recommended by Kotlin Gradle Plugin
	}
}

tasks.register('printClasspath') {
	doLast {
		println "Classpath length: " + sourceSets.main.runtimeClasspath.asPath.length()
		println "Classpath:"
		sourceSets.main.runtimeClasspath.each { println it }
	}
}


java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17
}

jar {
	inputs.property "archivesName", project.base.archivesName

	from("LICENSE") {
		rename { "${it}_${inputs.properties.archivesName}"}
	}
}

// configure the maven publication
publishing {
	publications {
		create("mavenJava", MavenPublication) {
			artifactId = project.archives_base_name
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}